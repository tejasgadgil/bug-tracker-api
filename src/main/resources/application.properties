spring.application.name=bug-tracker-api
#
## PostgreSQL Database Connection Settings
## Replace 'your_database_name' with the name of your local database.
#spring.datasource.url=jdbc:postgresql://localhost:5432/bug-tracker
#
## Replace 'your_username' and 'your_password' with your PostgreSQL credentials.
#spring.datasource.username=postgres
#spring.datasource.password=postgres
#
## JPA (Java Persistence API) Settings
## This tells Hibernate (the default JPA provider) to show the SQL it generates in the console.
## It's incredibly useful for debugging to see the exact queries being run against the database.
#spring.jpa.show-sql=true
#
## This property ensures Hibernate generates SQL optimized for PostgreSQL.
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
#
## This setting tells Hibernate how to handle the database schema.
## 'update' will automatically update the schema based on your entities, which is fine for development.
## For production, you would typically use a tool like Flyway or Liquibase for migrations.
#spring.jpa.hibernate.ddl-auto=update

# MySQL Database Connection Settings
spring.datasource.url=jdbc:mysql://localhost:3306/bug-tracker?useSSL=false&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=n3u3da!

# Show SQL queries in the console for debugging
spring.jpa.show-sql=true

# MySQL dialect for Hibernate (JPA provider)
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# Automatically update the schema on app startup (good for development)
spring.jpa.hibernate.ddl-auto=update


jwt.secret=zEux9hJk0lVaG7@3uPtl=qNRwbAyc#vY
#(e.g. 1 day in milliseconds)
jwt.expiration=86400000

#logging.level.org.springframework=DEBUG
#logging.level.com.sj.bugtracker=WARN
#
#logging.file.name=logs/bug-tracker-api.log